version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: esg_postgres_db
    environment:
      - POSTGRES_USER=esg_user
      - POSTGRES_PASSWORD=esg_password
      - POSTGRES_DB=esg_db
    volumes:
      - esg_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  chroma:
    image: chromadb/chroma:0.4.24 # Using a specific stable version
    container_name: esg_chroma_db
    volumes:
      - esg_chroma_data:/chroma/chroma
    ports:
      - "8011:8000" # Use a less common port for Chroma
    restart: unless-stopped

  backend:
    container_name: esg_backend_service
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      chroma:
        condition: service_started
    ports:
      - "8000:8000" # Backend API port
    volumes:
      - ./backend:/app/backend # Mount local code for live reloading during development
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    build:
      context: ./frontend
      args:
        - VITE_API_URL=
        - VITE_WS_URL=
    container_name: esg_frontend_service
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=production
    restart: unless-stopped

volumes:
  esg_postgres_data:
    driver: local
  esg_chroma_data:
    driver: local